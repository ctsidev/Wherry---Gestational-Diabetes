-- *******************************************************************************************************
-- STEP 4
--		Create Drivers Tables for lABS, Medications, and Allergies
-- *******************************************************************************************************
--------------------------------------------------------------------------------
--	STEP 4.1: Pull all labs for the cohort
--				Check to make sure that these codes match your environment
--				p.order_type_c in (7, 26, 62, 63)
--				At UCLA 7 is the main one and 26 has some. 62 and 63 not so many.
--------------------------------------------------------------------------------
DROP TABLE xdr_Baghdadi_laball PURGE;
CREATE TABLE xdr_Baghdadi_laball AS 
SELECT 	DISTINCT coh.pat_id,
                o.pat_enc_csn_id, 
                o.order_proc_id, 
                p.proc_id, 
                p.proc_code, 
                p.description, 
                o.component_id, 
                cc.name component_name, 
                p.order_time, 
                p.result_time, 
                o.result_date, 
                trim(o.ord_value) as ord_value, 
                o.ord_num_value, 
                o.reference_unit, 
                o.ref_normal_vals, 
                o.reference_low, 
                o.reference_high,
                p.order_status_c, 
                p.order_type_c,
                o.RESULT_FLAG_C,
                op2.specimn_taken_time,
		--If there is a relevant operator in this field ('%','<','>','='), it gets captured in its own field
                case when regexp_like(ord_value,'[%<>]=*','i') then regexp_substr(o.ord_value,'[><%]=*') else null end as harm_sign,
                trim(o.ord_value) as harm_text_val,
		/*
		In the following case statement, the code identifies three different value patterns and applies different strategies to clean the data:
		-If the result includes ':', or text, ':' it replaces with a default value. Ex 'NEGATIVE' or '12-19-08 6:45AM' --> '9999999'
		-If the result includes '<','>',or'=', the code strips that character and formats the number accordingly. Ex '<0.04' --> '0.04')
		-If the result includes '%', the code strips that character and formats the number accordingly. Ex. '28%' --> '28'
		
		All formatting shall respect decimal values
		*/
                case when regexp_like(ord_value,':','i')
                  or regexp_substr(ord_value,'[1-9]\d*(\.\,\d+)?') is null
                       then ord_num_value
                  when regexp_like(ord_value,'[<>]=*','i')
                       then to_number(regexp_substr(ord_value,'-?[[:digit:],.]*$'),'9999999999D9999999999', 'NLS_NUMERIC_CHARACTERS = ''.,''' )
                  when regexp_like(ord_value,'%','i') 
                       then to_number(regexp_substr(ord_value,'[1-9]\d*(\.\,\d+)?'),'9999999999D9999999999', 'NLS_NUMERIC_CHARACTERS = ''.,''' )
                  else ord_num_value end as harm_num_val,
                cc.common_name
              FROM clarity.order_results o
              JOIN XDR_BAGHDADI_COH  coh on o.pat_enc_csn_id = coh.pat_enc_csn_id
              --JOIN XDR_BAGHDADI_IP_ENC enc on coh.pat_enc_csn_id = enc.pat_enc_csn_id
              JOIN clarity.order_proc p ON p.order_proc_id = o.order_proc_id 
              JOIN clarity.clarity_component cc ON o.component_id = cc.component_id
              LEFT JOIN clarity.order_proc_2 op2 on p.ORDER_PROC_ID = op2.ORDER_PROC_ID
              where p.order_type_c in (7, 26, 62, 63)			--doulbe check this codes
              and p.ordering_date between to_date('10/01/2014','mm/dd/yyyy') and to_date('10/01/2016','mm/dd/yyyy')
              and o.ord_value is not null
              and o.order_proc_id is not null
              ;

--Add counts for QA
INSERT INTO XDR_BAGHDADI_COUNTS(TABLE_NAME,PAT_COUNT ,TOTAL_COUNT)
SELECT 'XDR_BAGHDADI_LABALL' AS TABLE_NAME
	,COUNT(distinct pat_id) AS PAT_COUNT	--    3,736(9/5/17)
	,COUNT(*) AS TOTAL_COUNT 		--5,953,931(9/5/17)
FROM XDR_BAGHDADI_LABALL;
COMMIT;

--------------------------------------------------------------------------------
--	STEP 4.2: Export Lab counts to file to send to Investigator for review
--------------------------------------------------------------------------------
SELECT proc_id, description, component_id, component_name, COUNT(*) AS total 
	FROM xdr_Baghdadi_laball    
  GROUP BY proc_id, description, component_id, component_name
  ORDER BY component_name;

--------------------------------------------------------------------------------
--	STEP 4.3: Pull all meds for the cohort
--------------------------------------------------------------------------------
DROP table XDR_BAGHDADI_MEDSALL PURGE;
create table XDR_BAGHDADI_MEDSALL as
select DISTINCT med1.*,
	cm.pharm_class_c,
	zpc.name as pharm_class,
	cm.thera_class_c,
	ztc.name as thera_class,
	cm.pharm_subclass_c,
	zsc.name as pharm_subclass,
  cm.name medication_name, 
	cm.generic_name
FROM (
SELECT  m.pat_id,
	m.pat_enc_csn_id, 
	m.order_med_id, 
	/*m.ordering_date, 
	m.start_date,
	m.end_date,*/
	m.ORDER_INST,
	m.ORDER_START_TIME,
	m.ORDER_END_TIME
	/*
	In some circumstances, for example when Intelligent Medication Selection selects an IMS mixture, this column may contain template records that do not represent real
medications. For this reason, it is recommended to use ORDER_MEDINFO. DISPENSABLE_MED_ID when reporting on medication orders.
Additionally, in some cases where dispensable_med_id is not populated, user_sel_med_id is the field form where to obtain the medication_id
*/
  case when m.medication_id != 800001 then m.medication_id
       else coalesce(omi.dispensable_med_id, m.user_sel_med_id) end as used_med_id,        
	m.medication_id, 
  --omi.dispensable_med_id,
  --m.user_sel_med_id,
	m.hv_discrete_dose,
	zmu.name as dose_unit,
    m.MED_DIS_DISP_QTY,
    zmudis.name as dis_dose_unit,
    zos.name as order_status,
    zom.name as ordering_mode,
    zoc.name as order_class,
	omi.last_admin_inst,
	m.sig,
	m.quantity,
	ipf.freq_name,
	m.refills,
	rou.NAME                    AS route_name,
    rou.abbr                    AS route_abbreviation,
	mar.INFUSION_RATE,
	mar.MAR_INF_RATE_UNIT_C,
	zmudis.name as inf_rate_dose_unit
FROM clarity.order_med m 
JOIN XDR_BAGHDADI_COH  coh on m.pat_enc_csn_id = coh.pat_enc_csn_id
LEFT JOIN clarity.order_medinfo omi on m.order_med_id = omi.order_med_id
LEFT JOIN clarity.mar_admin_info  mar   ON m.order_med_id = mar.order_med_id
LEFT JOIN clarity.zc_admin_route  rou   ON mar.route_c = rou.MED_ROUTE_C
left join clarity.ip_frequency ipf on m.hv_discr_freq_id = ipf.freq_id
left join clarity.zc_med_unit zmu on m.hv_dose_unit_c = zmu.disp_qtyunit_c
left join clarity.zc_order_status zos on m.order_status_c = zos.order_status_c
left join clarity.zc_ordering_mode zom on m.ordering_mode_c = zom.ordering_mode_c
left join clarity.zc_med_unit zmudis on m.MED_DIS_DISP_UNIT_C = zmudis.disp_qtyunit_c
left join clarity.zc_med_unit zmudis2 on mar.MAR_INF_RATE_UNIT_C = zmudis2.disp_qtyunit_c
left join clarity.zc_order_class zoc on m.order_class_C = zoc.order_class_c
WHERE m.ordering_date is not null
	AND m.start_date is not null
) med1
LEFT JOIN clarity.clarity_medication cm on med1.used_med_id = cm.medication_id
left join clarity.zc_pharm_class zpc on cm.pharm_class_c = zpc.pharm_class_c
left join clarity.zc_thera_class ztc on cm.thera_class_c = ztc.thera_class_c
left join clarity.zc_pharm_subclass zsc on cm.pharm_subclass_c = zsc.pharm_subclass_c
;

--Add counts for QA
INSERT INTO XDR_BAGHDADI_COUNTS
INSERT INTO XDR_BAGHDADI_COUNTS(TABLE_NAME,PAT_COUNT ,TOTAL_COUNT)
	,COUNT(distinct pat_id) AS PAT_COUNT	--    3,738(9/5/17)
	,COUNT(*) AS TOTAL_COUNT 		--1,216,558(9/5/17)
FROM XDR_BAGHDADI_MEDSALL;
COMMIT;
--------------------------------------------------------------------------------
--	STEP 4.4: Export Med to file to send to Investigator for review
--------------------------------------------------------------------------------

SELECT medication_id
      ,medication_name
      ,generic_name
      ,pharm_class
      ,thera_class
      ,pharm_subclass
      ,COUNT(*)             AS total 
	FROM XDR_BAGHDADI_MEDSALL                     
  GROUP BY medication_id
      ,medication_name
      ,generic_name
      ,pharm_class
      ,thera_class
      ,pharm_subclass
  ORDER BY medication_name;

--------------------------------------------------------------------------------
--	STEP 4.5: Pull all allergies for the cohort
--------------------------------------------------------------------------------
DROP TABLE xdr_Baghdadi_algall PURGE;
CREATE TABLE xdr_Baghdadi_algall AS
SELECT DISTINCT pat.pat_id 
               ,alg.allergy_id
               ,alg.allergen_id
               ,alg.description
               ,alg.reaction
               ,alg.date_noted
               ,alg.severity_c
               ,xsv.name                  AS severity
               ,alg.allergy_severity_c
               ,xas.name                  AS allergy_severity
               ,alg.alrgy_status_c
               ,xst.name                  AS allergy_status
               ,alg.alrgy_dlet_rsn_c
               ,xdr.name                  AS delete_reason
               ,alg.alrgy_dlt_cmt
               ,alg.alrgy_entered_dttm
  FROM XDR_BAGHDADI_PAT                 pat
  JOIN clarity.allergy                  alg ON pat.pat_id = alg.pat_id
  LEFT JOIN clarity.zc_severity         xsv ON alg.severity_c = xsv.severity_c
  LEFT JOIN clarity.zc_allergy_severit  xas ON alg.allergy_severity_c = xas.allergy_severity_c
  LEFT JOIN clarity.zc_alrgy_status     xst ON alg.alrgy_status_c = xst.alrgy_status_c
  LEFT JOIN clarity.zc_alrgy_dlet_rsn   xdr ON alg.alrgy_dlet_rsn_c = xdr.alrgy_dlet_rsn_c
  WHERE
      alg.ALRGY_STATUS_C = 1 		--'Active'                       --allergy_status can be 'deleted' too
;
--Add counts for QA
INSERT INTO XDR_BAGHDADI_COUNTS(TABLE_NAME,PAT_COUNT ,TOTAL_COUNT)
SELECT 'XDR_BAGHDADI_ALGALL' AS TABLE_NAME
	,COUNT(distinct pat_id) AS PAT_COUNT	--2,178(9/5/17)
	,COUNT(*) AS TOTAL_COUNT 		--6,441(9/5/17)
FROM xdr_Baghdadi_algall;
COMMIT;
--------------------------------------------------------------------------------
--	STEP 4.6: Export Lab counts to file to send to Investigator for review
--------------------------------------------------------------------------------
SELECT allergen_id
		,description
		,count(*)
FROM xdr_Baghdadi_algall
GROUP BY allergen_id
		,description;
